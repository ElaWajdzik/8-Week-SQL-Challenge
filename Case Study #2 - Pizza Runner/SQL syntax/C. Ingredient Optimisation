------------------------------
--C. Ingredient Optimisation--
------------------------------

--Author: Ela Wajdzik
--Date: 19.05.2023 (update 23.05.2023)
--Tool used: Visual Studio Code & xampp

USE pizza_runner;

--1.What are the standard ingredients for each pizza?

--using the method with extra tables contains numbers
--metoda come from https://www.delftstack.com/howto/mysql/mysql-split-string-into-rows/

--check how many ingredients are in every kind of pizza
--max=8
SELECT
    *,
    (LENGTH(toppings) - LENGTH(REPLACE(toppings,",","")) + 1) AS number_of_ingredients    
FROM pizza_recipes;

DROP TABLE IF EXISTS numbers;
CREATE TABLE numbers (
  n int
);

--Table numbers contain the numbers from 1 to 8 (8 because it is the max number of ingredients)
INSERT INTO numbers
    (n)
VALUES
    (1),(2),(3),(4),(5),(6),(7),(8);

--Temporary tables with pizza ingredients, each one in a separate row
CREATE TEMPORARY TABLE pizza_recipes_temp AS(
    SELECT
        pizza_id,
        TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(pizza_recipes.toppings, ',', numbers.n), ',', -1)) AS topping_id
    FROM numbers
    JOIN pizza_recipes
    ON LENGTH(pizza_recipes.toppings) - LENGTH(REPLACE(pizza_recipes.toppings,',','')) +1 >= numbers.n
);

--Table of ingredients 

/*
SELECT
    pn.pizza_name,
    pt.topping_name
FROM pizza_recipes_temp AS pr
JOIN pizza_toppings AS pt
    ON pr.topping_id = pt.topping_id
JOIN pizza_names AS pn
    ON pr.pizza_id = pn.pizza_id
ORDER BY pn.pizza_name;
*/

SELECT
    pn.pizza_name,
    REPLACE(GROUP_CONCAT(pt.topping_name),',',', ') AS all_ingredients
FROM pizza_recipes_temp AS pr
JOIN pizza_toppings AS pt
    ON pr.topping_id = pt.topping_id
JOIN pizza_names AS pn
    ON pr.pizza_id = pn.pizza_id
GROUP BY pn.pizza_name;

--2.What was the most commonly added extra?

--For this query, we need table customer_orders_temp. This table contains clean data from the table customer_orders
--Table customer_orders_temp is defined in file 'pizza_runner cleaning.sql'
WITH pizza_extras_temp AS(
SELECT
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.extras,',',numbers.n),',',-1)) AS extras_id,
    COUNT(TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.extras,',',numbers.n),',',-1))) AS number_of_add
FROM customer_orders_temp AS co
JOIN numbers
    ON LENGTH(co.extras) - LENGTH(REPLACE(co.extras,',','')) +1 >= numbers.n
WHERE extras != ''
GROUP BY extras_id
)

SELECT 
    pt.topping_name,
    pe.number_of_add
FROM pizza_extras_temp AS pe
JOIN pizza_toppings AS pt
    ON pe.extras_id = pt.topping_id
ORDER BY pe.number_of_add DESC;

--3.What was the most common exclusion?

WITH pizza_exclusions_temp AS(
SELECT
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.exclusions,',',numbers.n),',',-1)) AS exclusions_id,
    COUNT(TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.exclusions,',',numbers.n),',',-1))) AS number_of_excluse
FROM customer_orders_temp AS co
JOIN numbers
    ON LENGTH(co.exclusions) - LENGTH(REPLACE(co.exclusions,',','')) +1 >= numbers.n
WHERE exclusions != ''
GROUP BY exclusions_id
)

SELECT 
    pt.topping_name,
    pe.number_of_excluse
FROM pizza_exclusions_temp AS pe
JOIN pizza_toppings AS pt
    ON pe.exclusions_id = pt.topping_id
ORDER BY pe.number_of_excluse DESC;


--4.Generate an order item for each record in the customers_orders table in the format of one of the following:
--      Meat Lovers
--      Meat Lovers - Exclude Beef
--      Meat Lovers - Extra Bacon
--      Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

WITH table_extras_temp AS(
SELECT
    co.id,
    REPLACE(GROUP_CONCAT(pt.topping_name),',',', ') AS extra_toppings,
    'extra' AS type
FROM customer_orders_temp AS co
JOIN numbers
    ON LENGTH(co.extras) - LENGTH(REPLACE(co.extras,',','')) +1>= numbers.n
JOIN pizza_toppings AS pt
    ON pt.topping_id = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.extras,',',numbers.n),',',-1))
WHERE extras != ''
GROUP BY id
),
table_exclusions_temp AS(
SELECT
    co.id,
    REPLACE(GROUP_CONCAT(pt.topping_name),',',', ') AS exclusion_toppings,
    'exclusion' AS type
FROM customer_orders_temp AS co
JOIN numbers
    ON LENGTH(co.exclusions) - LENGTH(REPLACE(co.exclusions,',','')) +1>= numbers.n
JOIN pizza_toppings AS pt
    ON pt.topping_id = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.exclusions,',',numbers.n),',',-1))
WHERE exclusions != ''
GROUP BY id
)

SELECT
    co.id,    
    CASE 
        WHEN co.exclusions = '' AND co.extras = '' THEN pn.pizza_name
        WHEN co.exclusions != '' AND co.extras = '' THEN CONCAT(pn.pizza_name,' - Exclude ',table_exclusions.exclusion_toppings)
        WHEN co.exclusions = '' AND co.extras != '' THEN CONCAT(pn.pizza_name,' - Extra ',table_extras.extra_toppings)
        WHEN co.exclusions != '' AND co.extras != '' THEN CONCAT(pn.pizza_name,' - Exclude ',table_exclusions.exclusion_toppings,' - Extra ',table_extras.extra_toppings)
        ELSE CONCAT(pn.pizza_name,' - ')
    END AS order_item

FROM customer_orders_temp AS co
JOIN pizza_names AS pn
    ON co.pizza_id = pn.pizza_id
LEFT JOIN  table_extras_temp AS table_extras 
    ON co.id = table_extras.id
LEFT JOIN table_exclusions_temp AS table_exclusions
    ON co.id = table_exclusions.id
GROUP BY co.id;

SELECT
    co.id,
    REPLACE(GROUP_CONCAT(pt.topping_name),',',', ') AS extra_toppings,
    'extra' AS type
FROM customer_orders_temp AS co
JOIN numbers
    ON LENGTH(co.extras) - LENGTH(REPLACE(co.extras,',','')) +1>= numbers.n
JOIN pizza_toppings AS pt
    ON pt.topping_id = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.extras,',',numbers.n),',',-1))
WHERE extras != ''
GROUP BY id;
)

SELECT
    co.id,
    pt.topping_name,
    'extra' AS type
FROM customer_orders_temp AS co
JOIN numbers
    ON LENGTH(co.extras) - LENGTH(REPLACE(co.extras,',','')) +1>= numbers.n
JOIN pizza_toppings AS pt
    ON pt.topping_id = TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(co.extras,',',numbers.n),',',-1))
WHERE extras != '';





SELECT
    id,
    pizza_id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(extras,',',numbers.n),',',-1)) AS topping_id,
    'extra' AS type,
    1 AS number
FROM customer_orders_temp
JOIN numbers
    ON LENGTH(extras) - LENGTH(REPLACE(extras,',','')) +1>= numbers.n
WHERE extras != '';

--5.Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
--      For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"

WITH table_extras_temp AS(
SELECT
    id,
    pizza_id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(extras,',',numbers.n),',',-1)) AS topping_id,
    'extra' AS type,
    1 AS number
FROM customer_orders_1
JOIN numbers
    ON LENGTH(extras) - LENGTH(REPLACE(extras,',','')) +1>= numbers.n
WHERE extras != ''
),
table_excludions_temp AS(
SELECT
    id,
    pizza_id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(exclusions,',',numbers.n),',',-1)) AS topping_id,
    'exclusion' AS type,
    -1 AS number
FROM customer_orders_1
JOIN numbers
    ON LENGTH(exclusions) - LENGTH(REPLACE(exclusions,',','')) +1>= numbers.n
WHERE exclusions != ''
),
table_pizza_toppings_temp AS(
SELECT
    id,
    co.pizza_id,
    topping_id,
    'pizza' AS type,
    1 AS number
FROM customer_orders_1 AS co
JOIN pizza_recipes_temp
    ON co.pizza_id = pizza_recipes_temp.pizza_id
),
table_pizza_ingredions_temp AS(
SELECT 
    id,
    pizza_id,
    topping_name,
    SUM(number) AS number_of_use
FROM 
    (SELECT * FROM table_excludions_temp
    UNION ALL
    SELECT * FROM table_extras_temp
    UNION ALL
    SELECT * FROM table_pizza_toppings_temp
    )AS table_toppings_order
JOIN pizza_toppings
    ON table_toppings_order.topping_id = pizza_toppings.topping_id
GROUP BY id, topping_name
ORDER BY id
)

SELECT 
    pi.id,
    CONCAT(
        pizza_name,': ',
        REPLACE(GROUP_CONCAT(
            CASE 
                WHEN number_of_use > 1 THEN CONCAT(number_of_use,'x',topping_name)
                ELSE topping_name
            END),',',', ')) AS all_ingredions
FROM table_pizza_ingredions_temp AS pi
JOIN pizza_names
    ON pi.pizza_id = pizza_names.pizza_id
WHERE pi.number_of_use >0
GROUP BY pi.id;

SELECT 
    pi.id,
    CONCAT(
        pizza_name,': ',
        REPLACE(GROUP_CONCAT(
            CASE 
                WHEN number_of_use > 1 THEN CONCAT(number_of_use,'x ',topping_name)
                ELSE topping_name
            END),',',', ')) AS all_toppings
FROM table_pizza_ingredions_temp AS pi
JOIN pizza_names
    ON pi.pizza_id - pizza_names.pizza_name
WHERE number_of_use >0 
GROUP BY pi.id;

---


--6.What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?

ALTER TABLE customer_orders_1
ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY;


WITH table_extras_temp AS(
SELECT
    id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(extras,',',numbers.n),',',-1)) AS topping_id,
    'extra' AS type,
    1 AS number
FROM customer_orders_1
JOIN numbers
    ON LENGTH(extras) - LENGTH(REPLACE(extras,',','')) +1>= numbers.n
WHERE extras != ''
),
table_excludions_temp AS(
SELECT
    id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(exclusions,',',numbers.n),',',-1)) AS topping_id,
    'exclusion' AS type,
    -1 AS number
FROM customer_orders_1
JOIN numbers
    ON LENGTH(exclusions) - LENGTH(REPLACE(exclusions,',','')) +1>= numbers.n
WHERE exclusions != ''
),
table_pizza_toppings_temp AS(
SELECT
    id,
    topping_id,
    'pizza' AS type,
    1 AS number
FROM customer_orders_1
JOIN pizza_recipes_temp
    ON customer_orders_1.pizza_id = pizza_recipes_temp.pizza_id
)

SELECT 
    topping_name,
    SUM(number) AS number_of_use
FROM 
    (SELECT * FROM table_excludions_temp
    UNION ALL
    SELECT * FROM table_extras_temp
    UNION ALL
    SELECT * FROM table_pizza_toppings_temp
    )AS table_toppings_order
JOIN pizza_toppings
    ON table_toppings_order.topping_id = pizza_toppings.topping_id
GROUP BY topping_name
ORDER BY number_of_use DESC;

---

WITH table_extras_temp AS(
SELECT
    id,
    pizza_id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(extras,',',numbers.n),',',-1)) AS topping_id,
    'extra' AS type,
    1 AS number
FROM customer_orders_1
JOIN numbers
    ON LENGTH(extras) - LENGTH(REPLACE(extras,',','')) +1>= numbers.n
WHERE extras != ''
),
table_excludions_temp AS(
SELECT
    id,
    pizza_id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(exclusions,',',numbers.n),',',-1)) AS topping_id,
    'exclusion' AS type,
    -1 AS number
FROM customer_orders_1
JOIN numbers
    ON LENGTH(exclusions) - LENGTH(REPLACE(exclusions,',','')) +1>= numbers.n
WHERE exclusions != ''
),
table_pizza_toppings_temp AS(
SELECT
    id,
    co.pizza_id,
    topping_id,
    'pizza' AS type,
    1 AS number
FROM customer_orders_1 AS co
JOIN pizza_recipes_temp
    ON co.pizza_id = pizza_recipes_temp.pizza_id
) 

SELECT 
    id,
    pizza_id,
    topping_name,
    SUM(number) AS number_of_use
FROM 
    (SELECT * FROM table_excludions_temp
    UNION ALL
    SELECT * FROM table_extras_temp
    UNION ALL
    SELECT * FROM table_pizza_toppings_temp
    )AS table_toppings_order
JOIN pizza_toppings
    ON table_toppings_order.topping_id = pizza_toppings.topping_id
WHERE id=5
GROUP BY id, topping_name
ORDER BY id;